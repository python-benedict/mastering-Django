mastering Django

# Installing and setting up django on your computer for development

with your first time using Django, you’ll have to take care of some initial setup. Namely, you’ll need to auto-generate some code that establishes a Django project – a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings

1. Download and setup python on your computer, python3.6 going is the best
2. create a virtual environment on your computer using (py -m venv myvenv) where myvenv will be the name for your virtual environment
Note: this virtual environment is important becuase it create a virtual space for you to work in on your pc instead of working in the entire space of your computer so any installations and setups just get to that space
3. python -m pip install Django (This line get python installed on your computer)

Note

You’ll need to avoid naming projects after built-in Python or Django components. In particular, this means you should avoid using names like django (which will conflict with Django itself) or test (which conflicts with a built-in Python package)

4. django-admin startproject <ProjectName>(This comman creates the django project)
4. You can create an app by using django-admin startapp <AppName>
5. To check the version of django installed use (python -m django --version) command on the command line


CREATING A POLL APP IN THE PROJECT
1. register your app in the project settings.py file
2. go to the views side and modify it like this
    from django.http import HttpResponse

    # Create your views here.
    def index(request):
        return HttpResponse('Hello, world. You are at the pool index')

3. Go to the urls.py file in your project and modify it like this
    from . import views

    urlpatterns = [
        path('', views.index, name='index'),
    ]

4. Go to the urls.py file in the project directory and modify it like this

    from django.contrib import admin
    from django.urls import path, include

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('polls/', include('polls.urls')),
    ]

5. run the development server using (python manage.py runserver)

NOTE ON HOW URLS WORK:
whenever django finds a matching url with the requested url, it calls the corresponding view with an HttpResponse object as the first argument and any value passed in the route as a keyword argument

6. Now run (python manage.py migrate) to migrate the admin site, authentication, content type, messages, session and staticfiles tables in the database.